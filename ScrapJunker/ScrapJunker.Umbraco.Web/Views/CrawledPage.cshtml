@inherits Umbraco.Web.Mvc.UmbracoTemplatePage
@using ContentModels = Umbraco.Web.PublishedContentModels;
@{
    Layout = "MasterPage.cshtml";
}

@section Styles{
    <style>
        iframe {
            width: 100%;
            z-index: -1;
            box-sizing: border-box;
            transform-origin: center top;
            transition: transform .05s linear;
            backface-visibility: hidden;
        }

        .droppable {
            width: 100%;
            background-color: #e4e5e6;
            text-align:center;
            border:dotted 1px;
        }

        .droppable:hover{
            opacity:0.5;
        }
    </style>
}

<div class="row">
    <div class="col-md-8">
        <div class="card">
            <div class="card-body">
                <iframe id="crawledPageContent" scrolling="no" frameborder="0"></iframe>
            </div>
        </div>
       
    </div>
    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                Selectors
            </div>
            <div class="card-body droppable" ondragover="onDragOver(event)" ondrop="onDrop(event)">
              <h3><i class="fa fa-arrow-circle-o-down"></i> Drag Here</h3>
            </div>
            <div class="card-body" id="dropped">

            </div>
            <div class="card-footer">
            </div>
        </div>
    </div>
</div>

@section Scripts{
    <script src="~/Scripts/jquery.sticky.js"></script>
    <script src="~/Scripts/iframeResizer.min.js"></script>

    <script>
        function scaleIframe(win, doc) {

          /** Below this point the scaling takes effect. */
          var BREAKPOINT = 1030;

          /**
           * The `window.resize`-callback gets throttled
           * to an interval of 30ms.
          */
          var THROTTLE = 30;

          /** Just the declaration. Definition comes later. */
          var IFRAME_HEIGHT;

          var iframe = doc.getElementsByTagName('iframe')[0],
              timestamp = 0;

          /** Defining the inital iframe-height. */
          IFRAME_HEIGHT = parseInt(getComputedStyle(iframe).height, 10);

          @*/**
           * Takes an object with CSS-transform-properties
           * and generates a cross-browser-ready style string.
           *
           * @param  {Object} obj
           * @return {String}
           */*@
          function transformStr(obj) {
            var obj = obj || {},
                val = '',
                j;
            for ( j in obj ) {
              val += j + '(' + obj[j] + ') ';
            }
            val += 'translateZ(0)';
            return '-webkit-transform: ' + val + '; ' +
                    '-moz-transform: ' + val + '; ' +
                    'transform: ' + val;
          }

          @*/**
           * Scaling the iframe if necessary.
           *
           * @return {Function}
           */*@
          function onResize() {

            var now = +new Date,
                winWidth = win.innerWidth,
                noResizing = winWidth > BREAKPOINT,
                scale,
                width,
                height,
                offsetLeft;

            if ( now - timestamp < THROTTLE || noResizing ) {
              /** Remove the style-attr if we're out of the "scaling-zone". */
              noResizing && iframe.hasAttribute('style') && iframe.removeAttribute('style');
              return onResize;
            }

            timestamp = now;

            /**
             * The required scaling; using `Math.pow` to get
             * a safely small enough value.
             */
            scale = Math.pow(winWidth / BREAKPOINT, 1.2);

            /**
             * To get the corresponding width that compensates
             * the shrinking and thus keeps the width of the
             * iframe consistent, we have to divide 100 by the
             * scale. This gives us the correct value in percent.
             */
            width = 100 / scale;

            /**
             * We're using the initial height and the compen-
             * sating width to compute the compensating height
             * in px.
             */
            height = IFRAME_HEIGHT / scale;

            /**
             * We have to correct the position of the iframe,
             * when changing its width.
             */
            offsetLeft = (width - 100) / 2;

            /** Setting the styles. */
            iframe.setAttribute('style', transformStr({
              scale: scale,
              translateX: '-' + offsetLeft + '%'
            }) + '; width: ' + width + '%; ' + 'height: ' + height + 'px');

            return onResize;

          }

          /** Listening to `window.resize`. */
          win.addEventListener('resize', onResize(), false);

        }
    </script>

    <script>
        function onDrop(event) {
            var source = event.dataTransfer.getData('sourceId');
            var el = $('#crawledPageContent').contents().find('body').find('#' + source);

            var dropped = $("#dropped");
            $(dropped).append($(el));

            $(dropped).append("<hr/>")
        }

        function onDragOver(ev) {
            ev.preventDefault();
        }

        function drag(index, el) {
            $(el).children().each(drag);
            $(el).prop('draggable', true);
        }

        function setIframeDraggable(iframe) {
            $(iframe).contents().find('body').children().each(drag);
            $(iframe).contents().find('body').find('*').on('dragstart', function (event) {
                event.dataTransfer = event.originalEvent.dataTransfer;
                var id = 'drag-' + (new Date()).getTime();
                event.target.id = id;
                event.dataTransfer.setData('sourceId', id);
            });
            $(iframe).contents().find('body').find('*').hover(
                function () {
                    $('*').css('outline', 'none');
                    $('*').css('cursor', 'auto');
                    $(this).css('outline', '1px solid black');
                    $(this).css('cursor', 'move');
                },
                function() {
                    $(this).css('outline', 'none');
                    $(this).css('cursor', 'auto');
                });
        }

        function iframeLoaded() {
            var iFrameID = document.getElementById('crawledPageContent');
            if (iFrameID) {
                // here you can make the height, I delete it first, then I make it again
                iFrameID.height = "";
                iFrameID.height = iFrameID.contentWindow.document.body.scrollHeight + "px";
            }
        }

        $(function () {

            $(".droppable").sticky({ topSpacing: 88 });

            var contentid = @Model.Content.Id;
            $.ajax({
                url: '/umbraco/api/content/get?publishedContentId=' + contentid,
                type: 'GET',
                beforeSend: function () {
                },
                success: function (result) {
                    $("#crawledPageContent").contents().find("body").html(result.Content);
                    setIframeDraggable($("#crawledPageContent")[0]);
                    scaleIframe(window.self, document);
                    iframeLoaded();
                },
                error: function (result) {
                    if (result.responseJSON.ModelState !== undefined) {
                        var errors = [];
                        for (var key in result.responseJSON.ModelState) {
                            for (var i = 0; i < result.responseJSON.ModelState[key].length; i++) {
                                errors.push(result.responseJSON.ModelState[key][i]);
                            }
                        }
                        toastr.error(errors);
                    }
                    else if (result.responseJSON.ExceptionMessage !== undefined) {
                        toastr.error(result.responseJSON.ExceptionMessage);
                    } else {
                        toastr.error(result.responseJSON.Message);
                    }
                },
                complete: function () {
                    // $("#content").LoadingOverlay("hide");
                }
            });
        });

    </script>
}