@inherits Umbraco.Web.Mvc.UmbracoTemplatePage
@using ContentModels = Umbraco.Web.PublishedContentModels;
@{
    Layout = "MasterPage.cshtml";
}

@section Styles{
    <style>
        iframe {
            width: 100%;
            z-index: -1;
        }

        .droppable {
            width: 100%;
            min-height: 200px;
            border: 1px solid black;
        }
    </style>
}

<div class="row">
    <div class="col-md-8">
        <iframe id="crawledPageContent" scrolling="no" frameborder="0"></iframe>
    </div>
    <div class="col-md-4">
        <div class="droppable" ondragover="onDragOver(event)" ondrop="onDrop(event)">

        </div>
    </div>
</div>

@section Scripts{
    <script src="~/Scripts/jquery.sticky.js"></script>
    <script>

        function squeezeFrame(iframe) {
            //if (self !== top) {
            //if (typeof myMax !== "number") { max = 0.1; } else { max = myMax; }
            //if (typeof myRedraw !== "string") myRedraw = "width";

            max = 0.1;
            myRedraw = "both";
            b = $(iframe).contents().find('body')[0];

            zW = (b.clientWidth - 5) / b.scrollWidth;

            if (myRedraw === "both") {
                zH = (b.clientHeight) / b.scrollHeight;
                if (zH < zW && zH < 1) { z = zH } else { z = zW };
            }
            else {
                z = zW;
            }

            if (z > 1 + max) { z = 1 + max; } else if (z < 1 - max) { z = 1 - max; }

            s = "zoom:" + z + "; -moz-transform: scale(" + z + "); -moz-transform-origin: 0 0;";

            if (typeof b.setAttribute === "function") b.setAttribute('style', s);
            else if (typeof b.style.setAttribute === "object") b.style.setAttribute('cssText', s);


            $(iframe).height($(b).height());

            //} else {
            //    if (typeof myContainer === "string") { window.location = myContainer; }
            //}
        }

        function onDrop(event) {
            var source = event.dataTransfer.getData('sourceId');
            var el = $('#crawledPageContent').contents().find('body').find('#' + source);
            $(event.target).append($(el));
        }

        function onDragOver(ev) {
            ev.preventDefault();
        }

        function drag(index, el) {
            $(el).children().each(drag);
            $(el).prop('draggable', true);
        }

        function setIframeDraggable(iframe) {
            $(iframe).contents().find('body').children().each(drag);
            $(iframe).contents().find('body').find('*').on('dragstart', function (event) {
                event.dataTransfer = event.originalEvent.dataTransfer;
                var id = 'drag-' + (new Date()).getTime();
                event.target.id = id;
                event.dataTransfer.setData('sourceId', id);
            });
            $(iframe).contents().find('body').find('*').hover(
                function () {
                    $('*').css('outline', 'none');
                    $('*').css('cursor', 'auto');
                    $(this).css('outline', '1px solid black');
                    $(this).css('cursor', 'move');
                },
                function() {
                    $(this).css('outline', 'none');
                    $(this).css('cursor', 'auto');
                });
        }

        $(function () {

            $(".droppable").sticky({ topSpacing: 88 });

            var contentid = @Model.Content.Id;
            $.ajax({
                url: '/umbraco/api/content/get?publishedContentId=' + contentid,
                type: 'GET',
                beforeSend: function () {
                    // $("#content").LoadingOverlay("show");
                },
                success: function (result) {

                    var highlight = '';//'<style> * :hover { opacity:0.8; cursor:move} </style>'
                    $("#crawledPageContent").contents().find("body").html(result.Content + highlight);
                    squeezeFrame($("#crawledPageContent")[0]);
                    setIframeDraggable($("#crawledPageContent")[0]);
                },
                error: function (result) {
                    if (result.responseJSON.ModelState !== undefined) {
                        var errors = [];
                        for (var key in result.responseJSON.ModelState) {
                            for (var i = 0; i < result.responseJSON.ModelState[key].length; i++) {
                                errors.push(result.responseJSON.ModelState[key][i]);
                            }
                        }
                        toastr.error(errors);
                    }
                    else if (result.responseJSON.ExceptionMessage !== undefined) {
                        toastr.error(result.responseJSON.ExceptionMessage);
                    } else {
                        toastr.error(result.responseJSON.Message);
                    }
                },
                complete: function () {
                    // $("#content").LoadingOverlay("hide");
                }
            });
        });

    </script>
}